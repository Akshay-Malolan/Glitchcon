import os
import json
import tempfile
import hashlib
from flask import Flask, request, jsonify
from flask_cors import CORS
import sys
import logging

# Add parent directory to path to allow importing from other modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import threat intelligence module
from utils.threat_intel import query_threat_intel

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
# Enable CORS for all routes and origins with more permissive settings
CORS(app, resources={r"/*": {"origins": "*", "supports_credentials": True}})

# Mock scan status storage
scan_status = {
    "status": "idle",  # idle, running, completed, error
    "stats": {
        "total_files": 0,
        "scanned_files": 0,
        "malicious_files": 0,
        "error_files": 0
    }
}

@app.route('/ping', methods=['GET'])
def ping():
    """Simple endpoint to check if the server is running"""
    logger.info("Ping request received")
    return jsonify({"status": "ok", "message": "API server is running"})

@app.route('/upload', methods=['POST'])
def upload_file():
    """Handle file upload and scanning"""
    try:
        if 'file' not in request.files:
            return jsonify({"error": "No file part in the request"}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({"error": "No file selected"}), 400
        
        # Save the uploaded file to a temporary location
        temp_dir = tempfile.gettempdir()
        file_path = os.path.join(temp_dir, file.filename)
        file.save(file_path)
        
        logger.info(f"File uploaded: {file.filename}")
        
        # Calculate file hash for threat intelligence
        file_hash = calculate_file_hash(file_path)
        
        # Mock response with static and dynamic analysis
        # In a real implementation, this would call your scanning modules
        result = {
            "filename": file.filename,
            "combined_risk_score": 0.2,  # Example score
            "static_analysis": {
                "prediction": {
                    "label": "benign",
                    "confidence": 0.8
                },
                "features": {
                    "file_size": os.path.getsize(file_path),
                    "file_type": file.filename.split('.')[-1] if '.' in file.filename else "unknown",
                    "md5": file_hash,
                    "sha256": file_hash,  # Using same hash for demo
                    "entropy": 7.2  # Example entropy
                }
            },
            "dynamic_analysis": {
                "risk_level": "Low",
                "suspicious_indicators": [],
                "network_connections": [],
                "file_activity": []
            }
        }
        
        # Clean up temporary file
        try:
            os.remove(file_path)
        except:
            pass
        
        return jsonify(result)
    
    except Exception as e:
        logger.error(f"Error processing upload: {str(e)}")
        return jsonify({"error": f"Server error: {str(e)}"}), 500

@app.route('/threat-intel', methods=['POST'])
def threat_intelligence():
    """Query threat intelligence for a file hash"""
    try:
        data = request.json
        if not data or 'file_hash' not in data:
            return jsonify({"error": "No file hash provided"}), 400
        
        file_hash = data['file_hash']
        result = query_threat_intel(file_hash)
        return jsonify(result)
    
    except Exception as e:
        logger.error(f"Error in threat intelligence query: {str(e)}")
        return jsonify({"error": f"Server error: {str(e)}"}), 500

@app.route('/scan/system', methods=['POST'])
def scan_system():
    """Start a system scan"""
    global scan_status
    try:
        # Reset and update scan status
        scan_status = {
            "status": "running",
            "stats": {
                "total_files": 100,  # Mock values
                "scanned_files": 0,
                "malicious_files": 0,
                "error_files": 0
            }
        }
        
        # In a real implementation, this would start a background task
        # For now, we'll simulate scan progress in the status endpoint
        
        return jsonify({"message": "System scan started", "status": "running"})
    
    except Exception as e:
        logger.error(f"Error starting system scan: {str(e)}")
        return jsonify({"error": f"Server error: {str(e)}"}), 500

@app.route('/scan/drive', methods=['POST'])
def scan_drive():
    """Start a drive or directory scan"""
    global scan_status
    try:
        data = request.json
        if not data or 'path' not in data:
            return jsonify({"error": "No path provided"}), 400
        
        path = data['path']
        recursive = data.get('recursive', False)
        
        # Reset and update scan status
        scan_status = {
            "status": "running",
            "stats": {
                "total_files": 50,  # Mock values
                "scanned_files": 0,
                "malicious_files": 0,
                "error_files": 0
            }
        }
        
        # In a real implementation, this would start a background task
        # For now, we'll simulate scan progress in the status endpoint
        
        return jsonify({
            "message": f"Scan started for {path} (recursive={recursive})", 
            "status": "running"
        })
    
    except Exception as e:
        logger.error(f"Error starting drive scan: {str(e)}")
        return jsonify({"error": f"Server error: {str(e)}"}), 500

@app.route('/scan/status', methods=['GET'])
def scan_status_endpoint():
    """Get current scan status"""
    global scan_status
    
    # Simulate scan progress for demo purposes
    if scan_status["status"] == "running":
        scan_status["stats"]["scanned_files"] += 5
        
        # Add a mock malicious file occasionally
        if scan_status["stats"]["scanned_files"] % 20 == 0:
            scan_status["stats"]["malicious_files"] += 1
        
        # Add a mock error occasionally
        if scan_status["stats"]["scanned_files"] % 30 == 0:
            scan_status["stats"]["error_files"] += 1
        
        # Finish the scan when all files are processed
        if scan_status["stats"]["scanned_files"] >= scan_status["stats"]["total_files"]:
            scan_status["status"] = "completed"
    
    return jsonify(scan_status)

def calculate_file_hash(file_path):
    """Calculate SHA-256 hash of a file"""
    sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b''):
            sha256.update(chunk)
    return sha256.hexdigest()

if __name__ == '__main__':
    logger.info("Starting AI Malware Scanner API server on http://127.0.0.1:8001")
    logger.info("CORS is enabled for all origins")
    try:
        app.run(host='127.0.0.1', port=8001, debug=True)
    except Exception as e:
        logger.error(f"Failed to start server: {str(e)}")
        sys.exit(1)