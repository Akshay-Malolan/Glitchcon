import time
import os
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from models.cloud_model import ModelWrapper
from static_analysis.analyze import extract_static_features, vectorize_features
from dynamic_analysis.sandbox import run_dynamic_analysis

class FileHandler(FileSystemEventHandler):
    def __init__(self, model):
        self.model = model

    def on_created(self, event):
        if not event.is_directory:
            print(f"New file detected: {event.src_path}")
            try:
                # Extract static features
                static_features = extract_static_features(event.src_path)
                feature_vector = vectorize_features(static_features)
                
                if feature_vector:
                    # Get static prediction
                    static_result = self.model.predict(feature_vector)
                    
                    # Perform dynamic analysis
                    dynamic_result = run_dynamic_analysis(event.src_path)
                    
                    # Calculate combined risk
                    risk_map = {"Low": 0.2, "Medium": 0.6, "High": 0.9}
                    dynamic_score = risk_map.get(dynamic_result["risk_level"], 0.1)
                    combined_risk = (static_result["confidence"] + dynamic_score) / 2
                    
                    print(f"Scan results for {event.src_path}:")
                    print(f"  Static analysis: {static_result['label']} (confidence: {static_result['confidence']:.2f})")
                    print(f"  Dynamic analysis: {dynamic_result['risk_level']}")
                    print(f"  Combined risk score: {combined_risk:.2f}")
                    
                    # Alert for high-risk files
                    if combined_risk > 0.7:
                        print(f"WARNING: High-risk file detected: {event.src_path}")
                else:
                    print(f"Could not extract valid features from {event.src_path}")
            except Exception as e:
                print(f"Error scanning file: {e}")

if __name__ == "__main__":
    model = ModelWrapper.get_instance()
    
    # Get directory to monitor
    default_path = "C:\\Downloads" if os.name == 'nt' else "/home/user/Downloads"
    path = input(f"Enter directory to monitor [default: {default_path}]: ") or default_path
    
    if not os.path.exists(path):
        os.makedirs(path, exist_ok=True)
        print(f"Created directory: {path}")
    
    print(f"Starting real-time monitoring of {path}")
    event_handler = FileHandler(model)
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()

    try:
        print("Monitoring started. Press Ctrl+C to stop.")
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
