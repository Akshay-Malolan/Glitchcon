import React, { useState, useRef } from 'react';

// Custom SVG Icons to replace Lucide icons
const UploadIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
    <polyline points="17 8 12 3 7 8"/>
    <line x1="12" y1="3" x2="12" y2="15"/>
  </svg>
);

const ShieldIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
  </svg>
);

const VirusIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="4"/>
    <path d="M12 8V2"/>
    <path d="M12 22v-6"/>
    <path d="M16 12h6"/>
    <path d="M2 12h6"/>
    <path d="m19.071 4.929-4.243 4.243"/>
    <path d="m9.172 14.828-4.243 4.243"/>
    <path d="m9.172 9.172-4.243-4.243"/>
    <path d="m19.071 19.071-4.243-4.243"/>
  </svg>
);

const SkullIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 2C6.5 2 2 6.5 2 12c0 3.5 1.5 6.5 4 8.5"/>
    <path d="M20 12c0-5.5-4.5-10-10-10"/>
    <path d="M8 22c1.5 1 3.5 2 6 2s4.5-1 6-2"/>
    <circle cx="9" cy="10" r="1"/>
    <circle cx="15" cy="10" r="1"/>
  </svg>
);

const FileTextIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"/>
    <polyline points="15 2 15 7 20 7"/>
    <line x1="9" y1="13" x2="15" y2="13"/>
    <line x1="9" y1="17" x2="15" y2="17"/>
  </svg>
);

const CyberMalwareScanner = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [scanMode, setScanMode] = useState('quick');
  const [scanStatus, setScanStatus] = useState(null);
  const [scanResults, setScanResults] = useState(null);
  const [isScanning, setIsScanning] = useState(false);
  const fileInputRef = useRef(null);

  const handleFileUpload = (event) => {
    const file = event.target.files[0] || event.dataTransfer.files[0];
    setSelectedFile(file);
    setScanStatus(null);
    setScanResults(null);
  };

  const handleDragOver = (event) => {
    event.preventDefault();
    event.stopPropagation();
  };

  const handleDrop = (event) => {
    event.preventDefault();
    event.stopPropagation();
    handleFileUpload(event);
  };

  const simulateScan = () => {
    if (!selectedFile) return;

    setIsScanning(true);
    setScanStatus(null);
    setScanResults(null);

    setTimeout(() => {
      // Simulated scan results
      const isMalicious = Math.random() > 0.7;
      
      setScanStatus(isMalicious ? 'infected' : 'safe');
      setScanResults({
        fileName: selectedFile.name,
        fileSize: `${(selectedFile.size / 1024).toFixed(2)} KB`,
        fileType: selectedFile.type || 'Unknown',
        md5Hash: 'a1b2c3d4e5f6g7h8i9j0k',
        ...(isMalicious ? {
          threatName: 'Trojan.Malware.GenericA',
          severityLevel: 'High',
          suggestedActions: [
            'Immediately quarantine the file',
            'Run full system antivirus scan',
            'Delete the file from all systems'
          ]
        } : {})
      });
      
      setIsScanning(false);
    }, 3000);
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-gray-900 text-white rounded-xl shadow-2xl border border-blue-500/20">
      <h1 className="text-2xl font-bold mb-6 text-center flex items-center justify-center text-blue-400">
        <VirusIcon className="mr-2 text-red-500" /> Cyber Malware Scanner
      </h1>

      {/* File Drop Zone */}
      <div 
        className={`border-2 border-dashed rounded-lg p-6 text-center transition-all duration-300 
        ${selectedFile 
          ? 'border-green-500 bg-green-500/10' 
          : 'border-blue-500/50 hover:border-blue-500 bg-gray-800'}`}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
      >
        <input 
          type="file" 
          ref={fileInputRef}
          className="hidden" 
          onChange={handleFileUpload}
        />
        <button 
          onClick={() => fileInputRef.current.click()}
          className="flex items-center mx-auto mb-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
        >
          <UploadIcon className="mr-2" /> Choose File
        </button>
        
        <p className="text-gray-400">
          {selectedFile 
            ? `Selected: ${selectedFile.name}` 
            : 'Drag and drop a file here or click to upload'}
        </p>
      </div>

      {/* Scan Mode Dropdown */}
      <div className="mt-4">
        <label className="block text-sm font-medium text-gray-300 mb-2">
          Scan Mode
        </label>
        <select 
          value={scanMode} 
          onChange={(e) => setScanMode(e.target.value)}
          className="w-full px-3 py-2 bg-gray-800 border border-blue-500/50 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          <option value="quick">Quick Scan</option>
          <option value="deep">Deep Scan</option>
          <option value="custom">Custom Scan</option>
        </select>
      </div>

      {/* Scan Button */}
      <button 
        onClick={simulateScan}
        disabled={!selectedFile || isScanning}
        className={`w-full mt-4 py-3 rounded transition-all duration-300 flex items-center justify-center ${
          selectedFile && !isScanning 
            ? 'bg-blue-600 text-white hover:bg-blue-700' 
            : 'bg-gray-700 text-gray-500 cursor-not-allowed'
        }`}
      >
        {isScanning ? (
          <>
            <div className="animate-spin mr-2">
              <ShieldIcon className="text-yellow-500" />
            </div>
            Scanning...
          </>
        ) : (
          'Start Malware Scan'
        )}
      </button>

      {/* Scanning Animation */}
      {isScanning && (
        <div className="mt-4 relative">
          <div className="h-1 bg-gradient-to-r from-blue-500 to-purple-500 animate-pulse w-full absolute"></div>
          <div className="text-center mt-2 text-gray-400">
            Analyzing file... Running {scanMode} scan
          </div>
        </div>
      )}

      {/* Scan Results */}
      {scanResults && !isScanning && (
        <div className="mt-6 p-4 bg-gray-800 rounded-lg border border-blue-500/30">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            {scanStatus === 'safe' ? (
              <ShieldIcon className="mr-2 text-green-500" />
            ) : (
              <SkullIcon className="mr-2 text-red-500" />
            )}
            Scan Results
          </h2>

          {/* Scan Status */}
          <div className={`mb-4 p-3 rounded text-center font-bold uppercase tracking-wider
            border 
            ${scanStatus === 'safe' 
              ? 'bg-green-500/10 border-green-500 text-green-400'
              : 'bg-red-500/10 border-red-500 text-red-400'}`}
          >
            {scanStatus === 'safe' ? 'File is Safe' : 'Malware Detected!'}
          </div>

          {/* File Metadata */}
          <div className="space-y-2 mb-4">
            <div className="flex justify-between border-b border-gray-700 pb-1">
              <span className="text-gray-400">File Name:</span>
              <span>{scanResults.fileName}</span>
            </div>
            <div className="flex justify-between border-b border-gray-700 pb-1">
              <span className="text-gray-400">File Size:</span>
              <span>{scanResults.fileSize}</span>
            </div>
            <div className="flex justify-between border-b border-gray-700 pb-1">
              <span className="text-gray-400">File Type:</span>
              <span>{scanResults.fileType}</span>
            </div>
            <div className="flex justify-between border-b border-gray-700 pb-1">
              <span className="text-gray-400">MD5 Hash:</span>
              <span className="text-sm">{scanResults.md5Hash}</span>
            </div>
          </div>

          {/* Threat Details (if infected) */}
          {scanStatus === 'infected' && (
            <div className="bg-red-500/10 border border-red-500/50 rounded p-3">
              <h3 className="text-lg font-semibold text-red-400 mb-2">
                <VirusIcon className="inline mr-2" /> Threat Details
              </h3>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-gray-400">Threat Name:</span>
                  <span>{scanResults.threatName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Severity:</span>
                  <span className="text-red-500 font-bold">
                    {scanResults.severityLevel}
                  </span>
                </div>
                <div>
                  <span className="text-gray-400 block mb-1">Suggested Actions:</span>
                  <ul className="list-disc list-inside text-yellow-400">
                    {scanResults.suggestedActions.map((action, index) => (
                      <li key={index}>{action}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CyberMalwareScanner;