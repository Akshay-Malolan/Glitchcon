import requests
import os
import logging
from dotenv import load_dotenv

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

def query_threat_intel(file_hash):
    # Try to get API key from environment variable first, fall back to default
    api_key = os.getenv("VIRUSTOTAL_API_KEY", "YOUR_VIRUSTOTAL_API_KEY")
    
    # Log API key status (masked for security)
    if api_key != "YOUR_VIRUSTOTAL_API_KEY":
        masked_key = f"{api_key[:5]}...{api_key[-5:]}" if len(api_key) > 10 else "***"
        logger.info(f"Using VirusTotal API key: {masked_key}")
    
    # Check if API key is still the default placeholder or empty
    if api_key == "YOUR_VIRUSTOTAL_API_KEY" or not api_key:
        logger.error("VirusTotal API key not configured")
        return {
            "error": "VirusTotal API key not configured. Please set VIRUSTOTAL_API_KEY in .env file or environment variables.",
            "status": "api_key_missing"
        }
    
    # Check if hash is valid
    if not is_valid_hash(file_hash):
        logger.error(f"Invalid hash format: {file_hash}")
        return {
            "error": f"Invalid hash format: {file_hash}. Please provide a valid MD5, SHA-1, or SHA-256 hash.",
            "status": "invalid_hash"
        }
    
    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": api_key}
    
    try:
        logger.info(f"Querying VirusTotal for hash: {file_hash}")
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            logger.info(f"VirusTotal response received for hash: {file_hash}")
            # Process the results to make them more user-friendly
            summary = _extract_scan_summary(data)
            return {
                "status": "success",
                "data": data,
                "summary": summary
            }
        elif response.status_code == 401:
            logger.error("VirusTotal API authentication failed. Invalid API key.")
            return {
                "error": "Invalid VirusTotal API key. Please check your configuration.",
                "status": "unauthorized"
            }
        elif response.status_code == 404:
            logger.info(f"Hash not found in VirusTotal: {file_hash}")
            return {
                "error": "File hash not found in VirusTotal database.",
                "status": "not_found"
            }
        elif response.status_code == 429:
            logger.error("VirusTotal API rate limit exceeded")
            return {
                "error": "VirusTotal API rate limit exceeded. Please try again later.",
                "status": "rate_limited"
            }
        else:
            logger.error(f"VirusTotal API error: {response.status_code}, {response.text}")
            return {
                "error": f"VirusTotal API error: {response.status_code}, {response.text}",
                "status": "api_error"
            }
    except requests.exceptions.Timeout:
        logger.error("VirusTotal API request timed out")
        return {
            "error": "VirusTotal API request timed out. Please try again later.",
            "status": "timeout"
        }
    except requests.exceptions.ConnectionError:
        logger.error("Could not connect to VirusTotal API")
        return {
            "error": "Could not connect to VirusTotal API. Please check your internet connection.",
            "status": "connection_error"
        }
    except Exception as e:
        logger.error(f"Unexpected error in VirusTotal API query: {str(e)}")
        return {
            "error": f"An unexpected error occurred: {str(e)}",
            "status": "unknown_error"
        }

def is_valid_hash(file_hash):
    """Check if the provided string is a valid hash format"""
    if not file_hash:
        return False
    
    # Check for valid MD5, SHA-1, or SHA-256 hash format
    valid_lengths = [32, 40, 64]  # MD5, SHA-1, SHA-256
    if len(file_hash) not in valid_lengths:
        return False
    
    # Check if hash contains only hexadecimal characters
    try:
        int(file_hash, 16)
        return True
    except ValueError:
        return False

def _extract_scan_summary(data):
    """Extract a simplified summary from VirusTotal API response"""
    try:
        attributes = data.get("data", {}).get("attributes", {})
        
        # Extract detection statistics
        stats = attributes.get("last_analysis_stats", {})
        total_engines = sum(stats.values())
        malicious = stats.get("malicious", 0)
        suspicious = stats.get("suspicious", 0)
        
        # Extract basic file info
        file_info = {
            "name": attributes.get("meaningful_name", "Unknown"),
            "size": attributes.get("size", 0),
            "type": attributes.get("type_description", "Unknown"),
            "first_seen": attributes.get("first_submission_date", "Unknown"),
            "last_seen": attributes.get("last_analysis_date", "Unknown"),
        }
        
        # Get top 5 detections
        detections = []
        analysis_results = attributes.get("last_analysis_results", {})
        for engine, result in analysis_results.items():
            if result.get("category") in ["malicious", "suspicious"]:
                detections.append({
                    "engine": engine,
                    "result": result.get("result", "unknown"),
                    "category": result.get("category")
                })
                if len(detections) >= 5:
                    break
        
        return {
            "detection_ratio": f"{malicious + suspicious}/{total_engines}",
            "malicious_count": malicious,
            "suspicious_count": suspicious,
            "file_info": file_info,
            "top_detections": detections
        }
    except Exception as e:
        return {"error": f"Error processing VirusTotal data: {str(e)}"}
