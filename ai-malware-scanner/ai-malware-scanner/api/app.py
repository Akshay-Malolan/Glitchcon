from fastapi import FastAPI, UploadFile, File, BackgroundTasks
from pydantic import BaseModel
from models.cloud_model import ModelWrapper
from static_analysis.analyze import extract_static_features, vectorize_features
from dynamic_analysis.sandbox import run_dynamic_analysis
import os
from scanner.full_scan import MalwareScanner

app = FastAPI()
model = ModelWrapper.get_instance()

class Features(BaseModel):
    features: list

class ScanRequest(BaseModel):
    path: str
    recursive: bool = True

@app.post("/predict")
def predict(features: Features):
    """
    Predict if a sample is malicious based on its features.
    """
    result = model.predict(features.features)
    return result

@app.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    """
    Endpoint to upload a file for scanning and predict directly from the file.
    """
    try:
        # Save the uploaded file temporarily
        os.makedirs("temp", exist_ok=True)
        file_path = f"temp/{file.filename}"
        with open(file_path, "wb") as f:
            f.write(await file.read())
        
        # Extract features from the file using static analysis
        static_features = extract_static_features(file_path)
        feature_vector = vectorize_features(static_features)
        
        # Get static analysis prediction
        static_result = model.predict(feature_vector)
        
        # Perform dynamic analysis
        dynamic_result = run_dynamic_analysis(file_path, duration=30)
        
        # Combine results
        combined_risk_score = 0
        if static_result.get("confidence") and dynamic_result.get("risk_level"):
            # Convert risk level to score
            risk_map = {"Low": 0.2, "Medium": 0.6, "High": 0.9}
            dynamic_score = risk_map.get(dynamic_result["risk_level"], 0.1)
            combined_risk_score = (static_result["confidence"] + dynamic_score) / 2
        
        return {
            "filename": file.filename,
            "static_analysis": {
                "prediction": static_result,
                "features": static_features
            },
            "dynamic_analysis": dynamic_result,
            "combined_risk_score": combined_risk_score
        }
    except Exception as e:
        return {"error": str(e)}

@app.post("/scan/system")
async def scan_system(background_tasks: BackgroundTasks):
    """
    Scan the entire system for malware.
    """
    try:
        scanner = MalwareScanner(use_dynamic_analysis=True, deep_scan=False)
        background_tasks.add_task(scanner.scan_system)
        
        return {"message": "System scan started in the background."}
    except Exception as e:
        return {"error": str(e)}

@app.post("/scan/drive")
async def scan_drive(background_tasks: BackgroundTasks, scan_request: ScanRequest):
    """
    Scan a specific drive or directory.
    """
    try:
        # Ensure the directory is accessible to avoid Permission Denied errors.
        if not os.access(scan_request.path, os.R_OK):
            return {"error": f"No read permissions for directory: {scan_request.path}"}
            
        scanner = MalwareScanner(use_dynamic_analysis=True, deep_scan=False)
        background_tasks.add_task(
            scanner.scan_directory, 
            scan_request.path, 
            recursive=scan_request.recursive
        )
        
        return {"message": f"Scan of {scan_request.path} started in the background."}
    except Exception as e:
        return {"error": str(e)}

@app.get("/scan/status")
async def scan_status():
    """
    Get the status of the current scan.
    """
    # This would need to be implemented with a global scanner object
    # that keeps track of scan progress
    return {"message": "Scan status endpoint not implemented yet."}
