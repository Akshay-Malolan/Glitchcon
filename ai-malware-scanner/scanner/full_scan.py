import os
import sys
import torch
import hashlib
import platform
import psutil
import time
from static_analysis.analyze import extract_static_features
from models.cloud_model import model
from utils.threat_intel import query_threat_intel
from utils.alerts import send_alert

def scan_file(file_path):
    result = {}
    features = extract_static_features(file_path)
    if features:
        feature_values = list(features.values())
        input_tensor = torch.tensor([feature_values], dtype=torch.float32)
        prediction = model(input_tensor)
        risk_label = torch.argmax(prediction).item()
        risk = "High" if risk_label == 1 else "Low"
        
        try:
            with open(file_path, "rb") as f:
                file_data = f.read()
            file_hash = hashlib.sha256(file_data).hexdigest()
        except Exception as e:
            file_hash = "unknown"
        
        threat_info = query_threat_intel(file_hash)
        
        if risk == "High":
            subject = "High Risk Malware Detected"
            body = f"File: {file_path}\nRisk: {risk}\nThreat Info: {threat_info}"
            send_alert(subject, body, "security_team@example.com")
        
        result = {"file": file_path, "risk": risk, "threat_intel": threat_info}
    else:
        result = {"error": "Failed to extract features."}
    return result

def scan_directory(directory):
    results = {}
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.lower().endswith(('.exe', '.dll')):
                file_path = os.path.join(root, file)
                results[file_path] = scan_file(file_path)
    return results

def get_all_drives():
    """
    Get all available drives/mount points in the system.
    Returns a list of drive paths.
    """
    drives = []
    
    if platform.system() == "Windows":
        # For Windows, use drive letters
        for drive_letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            drive_path = f"{drive_letter}:\\"
            if os.path.exists(drive_path):
                drives.append(drive_path)
    else:
        # For Linux/Mac, use psutil to get mount points
        try:
            partitions = psutil.disk_partitions(all=False)
            for partition in partitions:
                if os.path.exists(partition.mountpoint):
                    drives.append(partition.mountpoint)
        except:
            # Fallback for Linux if psutil fails
            if os.path.exists("/"):
                drives.append("/")
    
    return drives

def scan_system(exclude_dirs=None, file_extensions=None):
    """
    Scan the entire system for malware.
    
    Args:
        exclude_dirs: List of directories to exclude from scanning
        file_extensions: List of file extensions to scan (default: ['.exe', '.dll'])
    
    Returns:
        Dictionary of scan results
    """
    if exclude_dirs is None:
        exclude_dirs = []
    
    # Convert exclude_dirs to absolute paths
    exclude_dirs = [os.path.abspath(dir_path) for dir_path in exclude_dirs]
    
    # Default file extensions to scan
    if file_extensions is None:
        file_extensions = ['.exe', '.dll']
    file_extensions = [ext.lower() for ext in file_extensions]
    
    # Get all drives
    drives = get_all_drives()
    print(f"Detected {len(drives)} drives: {', '.join(drives)}")
    
    # Add common system directories that might be skipped
    system_dirs = []
    if platform.system() == "Windows":
        system_dirs = [
            os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'System32'),
            os.path.join(os.environ.get('SystemRoot', 'C:\\Windows'), 'SysWOW64'),
            os.environ.get('ProgramFiles', 'C:\\Program Files'),
            os.environ.get('ProgramFiles(x86)', 'C:\\Program Files (x86)'),
            os.environ.get('USERPROFILE', 'C:\\Users\\Default')
        ]
    
    # Add system dirs if they're not already covered by drives
    for dir_path in system_dirs:
        if os.path.exists(dir_path) and not any(dir_path.startswith(drive) for drive in drives):
            drives.append(dir_path)
    
    # Results dictionary
    all_results = {}
    
    # Statistics
    start_time = time.time()
    total_files = 0
    scanned_files = 0
    malicious_files = 0
    
    # Scan each drive
    for drive in drives:
        print(f"\nScanning {drive}...")
        
        try:
            for root, dirs, files in os.walk(drive):
                # Skip excluded directories
                if any(os.path.abspath(root).startswith(excluded) for excluded in exclude_dirs):
                    dirs[:] = []  # Don't go into subdirectories
                    continue
                
                # Skip system directories that might cause issues
                skip_dirs = ['.git', 'node_modules', '$Recycle.Bin', '$RECYCLE.BIN', 'System Volume Information']
                dirs[:] = [d for d in dirs if d not in skip_dirs]
                
                # Process files in this directory
                for file in files:
                    total_files += 1
                    
                    # Print progress every 100 files
                    if total_files % 100 == 0:
                        elapsed = time.time() - start_time
                        print(f"Progress: {scanned_files} files scanned, {malicious_files} malicious found. Elapsed: {elapsed:.2f}s")
                    
                    # Check file extension
                    if not any(file.lower().endswith(ext) for ext in file_extensions):
                        continue
                    
                    file_path = os.path.join(root, file)
                    
                    try:
                        # Scan the file
                        result = scan_file(file_path)
                        all_results[file_path] = result
                        scanned_files += 1
                        
                        # Check if malicious
                        if result.get('risk') == 'High':
                            malicious_files += 1
                            print(f"ALERT: Malicious file found: {file_path}")
                    except Exception as e:
                        all_results[file_path] = {"error": f"Failed to scan: {str(e)}"}
        
        except Exception as e:
            print(f"Error scanning {drive}: {str(e)}")
    
    # Final statistics
    elapsed = time.time() - start_time
    print(f"\nScan Summary:")
    print(f"Total files found: {total_files}")
    print(f"Files scanned: {scanned_files}")
    print(f"Malicious files: {malicious_files}")
    print(f"Total scan time: {elapsed:.2f} seconds")
    
    return all_results

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--full-system":
        # Run a full system scan if requested
        print("Starting full system scan...")
        exclude_dirs = [
            os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", ".git"),
            os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "venv")
        ]
        results = scan_system(exclude_dirs=exclude_dirs)
        print(f"Scan complete. Found {sum(1 for r in results.values() if r.get('risk') == 'High')} malicious files.")
    else:
        # Default to scanning a test file
        test_file = "uploads/test_sample.exe"  # Ensure this file exists for testing
        print(scan_file(test_file))
