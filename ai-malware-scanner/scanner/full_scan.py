import os
import torch
import hashlib
from static_analysis.analyze import extract_static_features
from models.cloud_model import model
from utils.threat_intel import query_threat_intel
from utils.alerts import send_alert

def scan_file(file_path):
    result = {}
    features = extract_static_features(file_path)
    if features:
        feature_values = list(features.values())
        input_tensor = torch.tensor([feature_values], dtype=torch.float32)
        prediction = model(input_tensor)
        risk_label = torch.argmax(prediction).item()
        risk = "High" if risk_label == 1 else "Low"
        
        try:
            with open(file_path, "rb") as f:
                file_data = f.read()
            file_hash = hashlib.sha256(file_data).hexdigest()
        except Exception as e:
            file_hash = "unknown"
        
        threat_info = query_threat_intel(file_hash)
        
        if risk == "High":
            subject = "High Risk Malware Detected"
            body = f"File: {file_path}\nRisk: {risk}\nThreat Info: {threat_info}"
            send_alert(subject, body, "security_team@example.com")
        
        result = {"file": file_path, "risk": risk, "threat_intel": threat_info}
    else:
        result = {"error": "Failed to extract features."}
    return result

def scan_directory(directory):
    results = {}
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.lower().endswith(('.exe', '.dll')):
                file_path = os.path.join(root, file)
                results[file_path] = scan_file(file_path)
    return results

if __name__ == "__main__":
    test_file = "uploads/test_sample.exe"  # Ensure this file exists for testing
    print(scan_file(test_file))
