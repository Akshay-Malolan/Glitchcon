import os
import torch
import joblib

class MalwareClassifier(torch.nn.Module):
    def __init__(self, input_size):
        super(MalwareClassifier, self).__init__()
        self.fc1 = torch.nn.Linear(input_size, 128)
        self.fc2 = torch.nn.Linear(128, 64)
        self.fc3 = torch.nn.Linear(64, 2)
    
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return torch.softmax(x, dim=1)

# Local paths for the pre-trained model and input size file
LOCAL_MODEL_PATH = "models/malware_model.pth"
INPUT_SIZE_PATH = "models/input_size.pkl"

if not os.path.exists(LOCAL_MODEL_PATH):
    raise Exception("Pre-trained model file not found. Please download your best model from Kaggle and place it in the models folder.")

if not os.path.exists(INPUT_SIZE_PATH):
    raise Exception("Input size file not found. Please ensure models/input_size.pkl is available.")

input_size = joblib.load(INPUT_SIZE_PATH)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = MalwareClassifier(input_size).to(device)
model.load_state_dict(torch.load(LOCAL_MODEL_PATH, map_location=device))
model.eval()
print("Model loaded and ready for inference.")
