import os
import torch
import joblib
import requests

class MalwareClassifier(torch.nn.Module):
    def __init__(self, input_size):
        super(MalwareClassifier, self).__init__()
        self.fc1 = torch.nn.Linear(input_size, 128)
        self.fc2 = torch.nn.Linear(128, 64)
        self.fc3 = torch.nn.Linear(64, 2)
    
    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return torch.softmax(x, dim=1)

# Load input size saved during training
INPUT_SIZE_PATH = "models/input_size.pkl"
LOCAL_MODEL_PATH = "models/malware_model.pth"
input_size = joblib.load(INPUT_SIZE_PATH)

# ---------------------------
# Google Drive Download Settings
# ---------------------------
# Replace with the actual Google Drive File ID printed from train.py
GDRIVE_FILE_ID = "YOUR_GOOGLE_DRIVE_FILE_ID"

# Construct direct download URL for Google Drive:
MODEL_URL = f"https://drive.google.com/uc?export=download&id={GDRIVE_FILE_ID}"

if not os.path.exists(LOCAL_MODEL_PATH):
    print("Downloading model from Google Drive...")
    r = requests.get(MODEL_URL)
    if r.status_code == 200:
        os.makedirs("models", exist_ok=True)
        with open(LOCAL_MODEL_PATH, "wb") as f:
            f.write(r.content)
        print("Model downloaded successfully.")
    else:
        raise Exception("Failed to download model. Status code: " + str(r.status_code))

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = MalwareClassifier(input_size).to(device)
model.load_state_dict(torch.load(LOCAL_MODEL_PATH, map_location=device))
model.eval()
print("Model loaded and ready for inference.")
